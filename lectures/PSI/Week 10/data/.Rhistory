library(gmodels)
bully <- read.table('bullying.dat')
gmodels::CrossTable(bully$rsex, bully$ubullsch, fisher = T, chisq = T, expected = T, sresid = T, format = 'SPSS')
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 6/data")
library(gmodels)
bully <- read.table('bullying.dat')
gmodels::CrossTable(bully$rsex, bully$ubullsch, fisher = T, chisq = T, expected = T, sresid = T, format = 'SPSS')
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 5/data")
experim <- read.table('experim.dat')
View(experim)
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 6/data")
experim <- read.table('experim4ED.sav')
experim <- read.spss('experim4ED.sav')
library(haven)
experim <- read_sav('experim4ED.sav')
View(experim)
?mcnemar.test
mcnemar.test(experim$DepT1gp2, experim$DepT2Gp2)
experim <- read.table('experim.dat')
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 5/data")
experim <- read.table('experim.dat')
experim <- read.table('experim.dat')
View(experim)
mcnemar.test(experim$dept1gp2, experim$dept2gp2)
#load data
raqData <- read.delim(”raq.dat”, header=T) #create a correlation matrix
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 7/data")
#load data
raqData <- read.delim(”raq.dat”, header=T) #create a correlation matrix
#load data
raqData <- read.delim("raq.dat", header=T) #create a correlation matrix
#create a correlation matrix
raqMatrix <- cor(raqData)
round(raqMatrix, 2)
#Showing significance levels also
Hmisc::rcorr(as.matrix(raqData))
#Visualisation of correlations using circles
corrplot::corrplot(raqMatrix, method="circle")
#Visualisation using numbers
corrplot::corrplot(raqMatrix, method="number")
#Visualisation of significance levels at 0.05
res1 <- corrplot::cor.mtest(raqMatrix, conf.level = .95)
corrplot::corrplot(raqMatrix, p.mat = res1$p, sig.level = .05)
#Visualisation using numbers
corrplot::corrplot(raqMatrix, method="number")
corrplot::corrplot(raqMatrix, p.mat = res1$p, sig.level = .05)
#Showing p−value for non−significant results
corrplot(raqMatrix, p.mat = res1$p, insig = "p−value")
corrplot::corrplot(raqMatrix, p.mat = res1$p, sig.level = .05)
#Showing p−value for non−significant results
corrplot(raqMatrix, p.mat = res1$p, insig = "p−value")
#Visualisation of significance levels at 0.05
res1 <- corrplot::cor.mtest(raqMatrix, conf.level = .95)
corrplot::corrplot(raqMatrix, p.mat = res1$p, sig.level = .05)
#Showing p−value for non−significant results
corrplot(raqMatrix, p.mat = res1$p, insig = "p−value")
#Showing p−value for non−significant results
corrplot::corrplot(raqMatrix, p.mat = res1$p, insig = "p−value")
#Showing p−value for non−significant results
corrplot::corrplot(raqMatrix, p.mat = res1$p, insig = "p-value")
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data")
#Showing Xs for non−significant correlations
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05)
##Using ggcorrplot
p.mat <- ggcorrplot::cor pmat(raqData)
##Using ggcorrplot
p.mat <- ggcorrplot::cor pmat(raqData)
##Using ggcorrplot
p.mat <- ggcorrplot::cor_pmat(raqData)
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data")
#Showing Xs for non−significant correlations
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05)
#Showing lower diagonal
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05, type="lower")
#Showing the co−efficients
ggcorrplot::ggcorrplot(raqMatrix, lab=T, title = "Correlation matrix for RAQ data", type="lower")
#Bartlett ’s test
psych::cortest.bartlett(raqData)
psych::cortest.bartlett(raqMatrix, n = 2571)
#Measure of Sampling
psych::kmo(raqData)
REdaS::KMOS(raqData)
#Measure of Sampling
psych::kmo(raqData)
?psych::KMO
#Measure of Sampling
psych::KMO(raqData)
REdaS::KMOS(raqData)
#Determinant ( execute
det(raqMatrix) #or
det(cor(raqData))
#Principal Component Analysis
#On raw data using principal components analysis,
#nfactors is set to the number of variables we expect
#to get out which is equal to the number going in.
pc1 <- principal(raqData, nfactors = 23, rotate = "none")
#Principal Component Analysis
#On raw data using principal components analysis,
#nfactors is set to the number of variables we expect
#to get out which is equal to the number going in.
pc1 <- psych::principal(raqData, nfactors = 23, rotate = "none")
#Principal Component Analysis
#On raw data using principal components analysis,
#nfactors is set to the number of variables we expect
#to get out which is equal to the number going in.
pc1 <- psych::principal(raqData, nfactors = length(raqData), rotate = "none")
plot(pc1$values, type = "b") #scree plot
#Factor Analysis
#Principal Axis Factoring
pc3 <- fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax" , fm="pa")
#Factor Analysis
#Principal Axis Factoring
pc3 <- psych::fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax" , fm="pa")
psych::fa.graph(pc3)
#create a diagram showing the factors and how #the manifest variables load
psych::fa.diagram(pc3)
plot(pc3$values , type = "b") #scree plot
pc1$values #output eigenvalues
pc3$values #output eigenvalues
pc1$values #output eigenvalues
#Another way to look at Eigen values plus
#variance explained
pcf=princomp(raqData)
factoextra::get_eigenvalue(pcf)
pc1$Vaccounted#Variance accounted for
#Rotation PCA
pc2 <- principal(raqData, nfactors = 4, rotate = "varimax")
#Rotation PCA
pc2 <- psych::principal(raqData, nfactors = 4, rotate = "varimax")
#Extracting 4 factors
print.psych(pc2, cut = 0.3, sort = TRUE)
#Extracting 4 factors
print.psych::psych(pc2, cut = 0.3, sort = TRUE)
#Extracting 4 factors
psych::print.psych(pc2, cut = 0.3, sort = TRUE)
raqData[,c(6, 7, 10, 13, 14, 15, 18)]
#Reliability analysis
computerFear <- raqData[,c(6, 7, 10, 13, 14, 15, 18)]
statisticsFear <- raqData[, c(1, 3, 4, 5, 12, 16, 20, 21)]
mathFear <- raqData[, c(8, 11, 17)]
peerEvaluation <- raqData[, c(2, 9, 19, 22, 23)]
alpha(computerFear)
psych::alpha(computerFear)
psych::alpha(statisticsFear, keys = c(1, −1, 1, 1, 1, 1, 1, 1))
psych::alpha(statisticsFear, keys = c(1, -1, 1, 1, 1, 1, 1, 1))
psych::alpha(mathFear)
psych::alpha(peerEvaluation)
psych::alpha(statisticsFear) #for illustrative purposes
library(gmodels)
bully <- read.table('bullying.dat')
gmodels::CrossTable(bully$rsex, bully$ubullsch, fisher = T, chisq = T, expected = T, sresid = T, format = 'SPSS')
mcnemar.test(experim$dept1gp2, experim$dept2gp2)
#create a correlation matrix
raqMatrix <- cor(raqData)
round(raqMatrix, 2)
#Showing significance levels also
Hmisc::rcorr(as.matrix(raqData))
#Visualisation of correlations using circles
corrplot::corrplot(raqMatrix, method="circle")
#Visualisation using numbers
corrplot::corrplot(raqMatrix, method="number")
#Visualisation of significance levels at 0.05
res1 <- corrplot::cor.mtest(raqMatrix, conf.level = .95)
corrplot::corrplot(raqMatrix, p.mat = res1$p, sig.level = .05)
?cor.mtest
#Showing p−value for non−significant results
corrplot::corrplot(raqMatrix, p.mat = res1$p, insig = "p-value")
##Using ggcorrplot
p.mat <- ggcorrplot::cor_pmat(raqData)
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data")
#Showing Xs for non−significant correlations
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05)
#Showing lower diagonal
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05, type="lower")
#Showing the co−efficients
ggcorrplot::ggcorrplot(raqMatrix, lab=T, title = "Correlation matrix for RAQ data", type="lower")
#Bartlett ’s test
psych::cortest.bartlett(raqData) #or
psych::cortest.bartlett(raqMatrix, n = 2571)
#Measure of Sampling
psych::KMO(raqData) #or
REdaS::KMOS(raqData)
#Determinant ( execute
det(raqMatrix) #or
det(cor(raqData))
#Principal Component Analysis
#On raw data using principal components analysis,
#nfactors is set to the number of variables we expect
#to get out which is equal to the number going in.
pc1 <- psych::principal(raqData, nfactors = length(raqData), rotate = "none")
plot(pc1$values, type = "b") #scree plot
#Factor Analysis
#Principal Axis Factoring
pc3 <- psych::fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax" , fm="pa")
psych::print.psych(pc3,cut=0.3, sort=TRUE)
#create a diagram showing the factors and how #the manifest variables load
psych::fa.diagram(pc3)
plot(pc3$values , type = "b") #scree plot
pc1$values #output eigenvalues
plot(pc1$values, type = "b") #scree plot
#Factor Analysis
#Principal Axis Factoring
pc3 <- psych::fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax" , fm="pa")
psych::print.psych(pc3,cut=0.3, sort=TRUE)
#create a diagram showing the factors and how #the manifest variables load
psych::fa.diagram(pc3)
plot(pc3$values , type = "b") #scree plot
pc1$values #output eigenvalues
#Another way to look at Eigen values plus
#variance explained
pcf=princomp(raqData)
factoextra::get_eigenvalue(pcf)
pc1$Vaccounted#Variance accounted for
#Rotation PCA
pc2 <- psych::principal(raqData, nfactors = 4, rotate = "varimax")
#Extracting 4 factors
psych::print.psych(pc2, cut = 0.3, sort = TRUE)
#Reliability analysis
computerFear <- raqData[,c(6, 7, 10, 13, 14, 15, 18)]
statisticsFear <- raqData[, c(1, 3, 4, 5, 12, 16, 20, 21)]
mathFear <- raqData[, c(8, 11, 17)]
peerEvaluation <- raqData[, c(2, 9, 19, 22, 23)]
psych::alpha(computerFear)
View(statisticsFear)
?psych::alpha
psych::alpha(peerEvaluation)
gmodels::CrossTable(bully$rsex, bully$ubullsch, fisher = T, chisq = T, expected = T, sresid = T, format = 'SPSS')
?gmodles::CrossTable
?gmodels::CrossTable
mcnemar.test(experim$dept1gp2, experim$dept2gp2)
#create a correlation matrix
raqMatrix <- cor(raqData)
round(raqMatrix, 2)
#Showing significance levels also
Hmisc::rcorr(as.matrix(raqData))
#Visualisation of correlations using circles
corrplot::corrplot(raqMatrix, method="circle")
#Visualisation using numbers
corrplot::corrplot(raqMatrix, method="number")
#Visualisation of significance levels at 0.05
res1 <- corrplot::cor.mtest(raqMatrix, conf.level = .95)
#Visualisation of significance levels at 0.05
res1 <- corrplot::cor.mtest(raqMatrix, conf.level = .95)
corrplot::corrplot(raqMatrix, p.mat = res1$p, sig.level = .05)
#Showing p−value for non−significant results
corrplot::corrplot(raqMatrix, p.mat = res1$p, insig = "p-value")
##Using ggcorrplot
p.mat <- ggcorrplot::cor_pmat(raqData)
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data")
#Showing Xs for non−significant correlations
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05)
#Showing lower diagonal
ggcorrplot::ggcorrplot(raqMatrix, title = "Correlation matrix for RAQ data", p.mat = p.mat, sig.level = .05, type="lower")
#Showing the co−efficients
ggcorrplot::ggcorrplot(raqMatrix, lab=T, title = "Correlation matrix for RAQ data", type="lower")
#Bartlett ’s test
psych::cortest.bartlett(raqData) #or
psych::cortest.bartlett(raqMatrix, n = 2571)
#Measure of Sampling
psych::KMO(raqData) #or
REdaS::KMOS(raqData)
#Principal Component Analysis
#On raw data using principal components analysis,
#nfactors is set to the number of variables we expect
#to get out which is equal to the number going in.
pc1 <- psych::principal(raqData, nfactors = length(raqData), rotate = "none")
View(pc1)
plot(pc1$values, type = "b") #scree plot
#Factor Analysis
#Principal Axis Factoring
pc3 <- psych::fa(raqMatrix, nfactors=4, obs=NA, n.iter=1, rotate="varimax" , fm="pa")
psych::print.psych(pc3,cut=0.3, sort=TRUE)
#create a diagram showing the factors and how #the manifest variables load
psych::fa.diagram(pc3)
pc1$values #output eigenvalues
#Another way to look at Eigen values plus
#variance explained
pcf=princomp(raqData)
factoextra::get_eigenvalue(pcf)
pc1$Vaccounted#Variance accounted for
#Rotation PCA
pc2 <- psych::principal(raqData, nfactors = 4, rotate = "varimax")
#Extracting 4 factors
psych::print.psych(pc2, cut = 0.3, sort = TRUE)
#Reliability analysis
computerFear <- raqData[,c(6, 7, 10, 13, 14, 15, 18)]
statisticsFear <- raqData[, c(1, 3, 4, 5, 12, 16, 20, 21)]
mathFear <- raqData[, c(8, 11, 17)]
peerEvaluation <- raqData[, c(2, 9, 19, 22, 23)]
psych::alpha(computerFear)
psych::alpha(statisticsFear, keys = c(1, -1, 1, 1, 1, 1, 1, 1))
psych::alpha(mathFear)
psych::alpha(peerEvaluation)
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 8/data")
regression <- read.spss("Regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
library(foreign)
regression <- read.spss("Regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
model1 <- lm(regression$normexam~regression$standlrt)
library(foreign)
regression <- read.spss("Regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
model1 <- lm(regression$normexam~regression$standlrt)
model1
anova(model1)
summary(model1)
?anova
lm.beta(model1)
library(car)
regression$gender <- recode(regression$girl,'0=1,1=2')
regression$gender <- recode(regression$girl,'0=1;1=2')
regression$gender
library(foreign)
regression <- read.spss("Regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
model1 <- lm(regression$normexam~regression$standlrt)
model1
anova(model1)
summary(model1)
model2 <- lm(regression$normexam~regression$standlrt+girl)
model2 <- lm(regression$normexam~regression$standlrt+regression$girl)
model2 <- lm(regression,normexam~standlrt+girl)
model2 <- lm(normexam~standlrt+girl,data=regression)
anova(model2)
summary(model2)
?lm
library(foreign)
regression <- read.spss("Regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
regression <- read.spss("Regression.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
View(regression)
?lm
model1 <- lm(normexam~standlrt,data=regression)
model1
anova(model1)
summary(model1)
model2 <- lm(normexam~standlrt+girl,data=regression)
summary(model2)
regression <- table.read('Regression.sav')
regression <- read.spss('Regression.sav')
library(foreign)
lm(regression)
model1 <- lm(regression$normexam ~ regression$standlrt)
stargazer::stargazer(model1,format='text')
stargazer::stargazer(model1,type='text')
model2 <- lm(normexam ~ standlrt + girl, data=regression)
stargazer::stargazer(model2, type='text')
stargazer::stargazer(model1, model2, type='text')
stargazer::stargazer(model1, model2, type='text')
model3 <- lm(normexam ~ standlrt + girl + interaction())
model3 <- lm(normexam ~ standlrt + girl + interaction
model3 <- lm(normexam ~ standlrt + girl + interaction)
stargazer::stargazer(model3, type='text')
model3 <- lm(normexam ~ standlrt + girl + interaction)
model3 <- lm(normexam ~ standlrt + girl + interaction, data=regression)
stargazer::stargazer(model3, type='text')
model4 <- lm(normexam ~ standlrt + girl + boys_sch + girls_sch, data=regression)
stargazer::stargazer(model4, type='text')
summary(model1)
plot(model1)
plot(model1)
resid(model1)
plot(density(resid(model1)))
qqplot(model1, main='qq_plot')
qqplot(model1, main='QQ_Plot')
qqPlot(model1, main='QQ_Plot')
leveragePlots(model1)
library(car)
vifmode <- vif(model1)
vifmode <- vif(model2)
vifmodel <- vif(model2)
1/vifmodel
cooks <- cooks.distance(model1)
plot(cooks, ylab="Cook's Statistic")
durbinWatsonTest(model2)
survey <- read.table('survey.dat')
View(survey)
ppcor::spcor(tpcoiss, tpstress, tmarlow, data=survey)
?ppcor::spcor
?ppcor::spcor.test
ppcor::spcor.test(tpcoiss, tpstress, tmarlow, data=survey)
ppcor::spcor.test(tpcoiss, tpstress, tmarlow)
ppcor::spcor.test(survey$tpcoiss, survey$tpstress, survey$tmarlow)
View(survey)
?ppcor::spcor.test
survey_nna <- na.omit(survey)
ppcor::spcor.test(survey_nna$tpcoiss, survey_nna$tpstress, survey_nna$tmarlow)
ppcor::spcor.test(survey_nna$tpcoiss, survey_nna$toptim, survey_nna$tmarlow)
ppcor::spcor.test(survey_nna$tpstress, survey_nna$toptim, survey_nna$tmarlow)
library(foreign)
regression <- read.spss('Regression.sav')
model1 <- lm(regression$normexam ~ regression$standlrt)
stargazer::stargazer(model1,type='text')
model2 <- lm(normexam ~ standlrt + girl, data=regression)
stargazer::stargazer(model2, type='text')
stargazer::stargazer(model1, model2, type='text')
model3 <- lm(normexam ~ standlrt + girl + interaction, data=regression)
stargazer::stargazer(model3, type='text')
model4 <- lm(normexam ~ standlrt + girl + boys_sch + girls_sch, data=regression)
stargazer::stargazer(model4, type='text')
summary(model1)
plot(model1)
resid(model1)
plot(density(resid(model1)))
qqPlot(model1, main='QQ_Plot')
leveragePlots(model1)
survey <- read.table('survey.dat')
survey_nna <- na.omit(survey)
tmarlow
ppcor::spcor.test(survey_nna$tpcoiss, survey_nna$tpstress, survey_nna$tmarlow)
ppcor::spcor.test(survey_nna$tpcoiss, survey_nna$toptim, survey_nna$tmarlow)
ppcor::spcor.test(survey_nna$tpstress, survey_nna$toptim, survey_nna$tmarlow)
cor(survey_nna$tpcoiss, survey_nna$tpstress)
cor(survey_nna$tpcoiss, survey_nna$toptim)
cor(survey_nna$tpstress, survey_nna$toptim)
setwd("~/Documents/Code/bozicb.github.io/lectures/PSI/Week 10/data")
library(stargazer)
library(foreign)
mydata <- read.spss("youthcohort.sav")
logmodel1 <- glm(satmath ~ s1gender + s1pared, data=mydata, na.action=na.exclude(), family=binomial())
logmodel1 <- glm(satmath ~ s1gender + s1pared, data=mydata, na.action=na.exclude, family=binomial())
library(stargazer)
library(foreign)
mydata <- read.spss("youthcohort.sav")
logmodel1 <- glm(satmath ~ s1gender + s1pared, data=mydata, na.action=na.exclude, family=binomial())
stargazer::stargazer(logmodel1)
stargazer::stargazer(logmodel1)
logmodel1
lmtest::lrtest(logmodel1)
modelChi <- logmodel1$null.deviance - logmodel1$deviance
modelChi
chidf <- logmodel1$df.null - logmodel1$df.residual
chidf
logmodel1$df.null
logmodel1$df.residual
chisq.prob <- pchisq(modelChi, chidf)
chisq.prob
chisq.prob <- 1 - pchisq(modelChi, chidf)
chisq.prob
summary(logmodel1)
exp(coefficients(logmodel1))
rcompanion::nagelkerke(logmodel1, restrictNobs = T)
Epi::ROC(form=mydata$satmath ~ mydata$s1gender+mydata$s1pared, plot="ROC")
#Check your proportions for bias - are these representative?
table(mydata$satmath)
#Chi-square plus significance
lmtest::lrtest(logmodel1)
?Epi::ROC
library(stargazer)
library(foreign)
mydata <- read.spss("youthcohort.sav")
?glm
logmodel1 <- glm(satmath ~ s1gender + s1pared, data=mydata, na.action=na.exclude, family=binomial())
logmodel1
?lmtest::lrtest
lmtest::lrtest(logmodel1)
View(logmodel1)
modelChi <- logmodel1$null.deviance - logmodel1$deviance
modelChi <- logmodel1$null.deviance - logmodel1$deviance
modelChi
chidf <- logmodel1$df.null - logmodel1$df.residual
chidf
chisq.prob <- 1 - pchisq(modelChi, chidf)
chisq.prob
summary(logmodel1)
exp(coefficients(logmodel1))
rcompanion::nagelkerke(logmodel1, restrictNobs = T)
Epi::ROC(form=mydata$satmath ~ mydata$s1gender+mydata$s1pared, plot="ROC")
